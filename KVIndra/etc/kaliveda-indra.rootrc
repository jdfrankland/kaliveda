# Config file for INDRA library
#
#DATA REPOSITORY CONFIGURATION
#
#Examples of typical configurations (copy the appropriate lines to your .kvrootrc & uncomment them)
#
#####################Case 1
# User has installed irods client commands & set up access to
# INDRA data at CC-IN2P3 (i.e. "ils" works on command line)
# WARNING: any new data files generated by 'raw->recon', etc.
#          will be uploaded to CC-IN2P3 and replace any existing
#          files!!!
#DataRepository: ccali
#ccali.DataRepository.Type: irods
#ccali.DataRepository.RootDir:       /indra
#ccali.DataRepository.CacheAvailable: yes
#ccali.DataRepository.MaxCacheTime: 604800
#
####################Case 2
#User has data files on his machine or on a locally-mounted disk
#and has also installed irods client commands & set up access to
#INDRA data at CC-IN2P3 (i.e. "ils" works on command line).
#Any new data files generated by 'raw->recon' etc. are placed
# in the local repository 'myrepo' (=DefaultOutputRepository)
#
#--------Definition of local repository
#DataRepository: myrepo
#myrepo.DataRepository.RootDir: $(HOME)/Data
#
#--------Definition of remote repository
#+DataRepository: ccali
#ccali.DataRepository.Type: irods
#ccali.DataRepository.RootDir:       /indra
#ccali.DataRepository.CacheAvailable: yes
#ccali.DataRepository.MaxCacheTime: 604800
#ccali.DataRepository.DefaultOutputRepository: myrepo
#
#---------Definition of default data repository
#DataRepository.Default:  myrepo
#
# By default the file containing reconstructed events will be written in the same data repository
# as the raw data file from which it is created.
# This can be changed by setting the environment variable(s):
#
#Reconstruction.DataAnalysisTask.OutputRepository:     [name of repository]
#[name of dataset].Reconstruction.DataAnalysisTask.OutputRepository:         [name of repository]
#
# If no value is set for the current dataset (second variable), the value of the
# first variable will be used. If neither is defined, the new file will be written in the same repository as
# the raw file (if possible, i.e. if repository is not remote).

# By default the file containing identified events will be written in the same data repository
# as the recon data file from which it is created.
# This can be changed by setting the environment variable(s):
#
#ReconIdent.DataAnalysisTask.OutputRepository:     [name of repository]
#[name of dataset].ReconIdent.DataAnalysisTask.OutputRepository:         [name of repository]
#
# If no value is set for the current dataset (second variable), the value of the
# first variable will be used. If neither is defined, the new file will be written in the same repository as
# the recon file (if possible, i.e. if repository is not remote).

#+DataAnalysisTask:     GeneAnalysis
#GeneAnalysis.DataAnalysisTask.Title:     Analysis of gene data (recon)
#GeneAnalysis.DataAnalysisTask.Prereq:     recon
#GeneAnalysis.DataAnalysisTask.Analyser:     INDRAGeneDataAnalyser
#GeneAnalysis.DataAnalysisTask.UserClass:     yes
#GeneAnalysis.DataAnalysisTask.UserClass.Base:     INDRAGeneDataSelector/TSelector

+DataAnalysisTask:     RootAnalysis
RootAnalysis.DataAnalysisTask.Title:     Analysis of fully calibrated data
RootAnalysis.DataAnalysisTask.Prereq:     root
RootAnalysis.DataAnalysisTask.Analyser:     INDRAReconData
RootAnalysis.DataAnalysisTask.UserClass:     yes
RootAnalysis.DataAnalysisTask.UserClass.Base:     INDRASelector/TSelector
RootAnalysis.DataAnalysisTask.StatusUpdateInterval:     20000

#+DataAnalysisTask:     DSTtoROOT
#DSTtoROOT.DataAnalysisTask.Title:     Conversion of DST to KaliVeda format (dst->root)
#DSTtoROOT.DataAnalysisTask.Prereq:     dst
#DSTtoROOT.DataAnalysisTask.Analyser:     INDRADstToRootTransfert
+DataAnalysisTask:     DSTReader
DSTReader.DataAnalysisTask.Title:     Read old INDRA DST files
DSTReader.DataAnalysisTask.Prereq:     dst
DSTReader.DataAnalysisTask.Analyser:     INDRADSTReader

# Plugins for data analysis
+Plugin.KVDataAnalyser:   INDRADstToRootTransfert   KVINDRADstToRootTransfert       KVIndraanalysis "KVINDRADstToRootTransfert()"
+Plugin.KVDataAnalyser:   INDRADSTReader  KVINDRADSTReader       KVIndraanalysis "KVINDRADSTReader()"
+Plugin.KVDataAnalyser:   INDRAReconData         KVINDRAReconDataAnalyser     KVIndraanalysis "KVINDRAReconDataAnalyser()"
+Plugin.KVDataAnalyser:   INDRAGeneDataAnalyser  KVINDRAGeneDataAnalyser      KVIndraanalysis "KVINDRAGeneDataAnalyser()"
# TSelector plugins for analysis of ROOT TTrees
+Plugin.TSelector:   INDRASelector          KVINDRAEventSelector                   KVIndraanalysis   "KVINDRAEventSelector()"
+Plugin.TSelector:   INDRAOldSelector          KVOldINDRASelector                   KVIndraanalysis   "KVOldINDRASelector()"
+Plugin.TSelector:   INDRAGeneDataSelector  KVINDRAGeneDataSelector      KVIndraanalysis   "KVINDRAGeneDataSelector()"

#Define groups of users for restricting access to certain datasets
#To add a new group:
#+UserGroup: name_of_group
#To add a user to a group:
#+name_of_group.Users: name_of_users
#Neither the group name nor the user names must contain spaces

# Default values for names of files used to construct INDRA databases
# Default name for file describing systems for each dataset.
INDRADB.Systems:     Systems.dat
# Default name for file containing runlist for each dataset.
INDRADB.Runlist:     Runlist.csv
# Default settings for reading runlists (see KVINDRARunListReader)
INDRADB.Runlist.Separator:       |
INDRADB.Runlist.Comment:       #
# Default name for file containing ChIo pressures for each dataset.
INDRADB.Pressures:     ChIoPressures.dat
# Default name for file containing correspondence run-pedestal file for each dataset.
INDRADB.Pedestals:      Pedestals.dat
# Default name for file containing pedestal corrections for each dataset.
INDRADB.PedestalCorrections:            DeltaPied.dat
# Default name for file containing calibration peaks for each dataset.
INDRADB.CalibPeaks:        kvpeak_base.dat
# Default name for file containing electronic calibration for ChIo & Si for each dataset.
INDRADB.ElectronicCalibration:    ChVolt.dat
# Default name for file containing ChIo & Si calibration for each dataset.
INDRADB.ChIoSiVoltMeVCalib:     CalibMeVVoltChIoSi.dat
# Default names for files containing CsI calibrations for each dataset.
INDRADB.CalibCsI.Z=1:            CsICalibZ1.dat
INDRADB.CalibCsI.Z>1:            CsICalibZ2.dat
# Stability corrections for gain of CsI total light output
INDRADB.CsILumCorr:          corrLum
INDRADB.CsILumCorr.FileName:    run%d.corrLum
# Run - gain correspondence for detectors
INDRADB.Gains:    Gains.dat
# VAMOS calibration file
INDRADB.VamosCalibFile:  VAMOScalib.list
# Default filename containing correspondance between CsI detector and PinLaser
INDRADB.CsIPinCorr:          CsI_PILA.dat
# Default name for file containing linear coefficients for GG->PG conversion (silicon & ChIo detectors)
INDRADB.GGtoPGFactors:     GGtoPGFactors.dat
# correspondance entre codeur et detecteurs
INDRADB.Codeurs:    Codeurs.dat
# liste des detecteurs physiquement absents
INDRADB.AbsentDet:	AbsentDetectors.dat
# liste des detecteurs ne marchant pas ou eteints (out of order)
INDRADB.OoODet:    INDRA.OoODetectors.dat
# liste des parametres d acquisition ne marchant pas (-1 sur l ensemble d un run)
INDRADB.OoOACQPar:    OoOACQParameters.dat

# Default dataset subdirectory containing files with mean pulser data for each run
KVINDRAPulserDataTree.GeneDetDir:   gene_detecteurs
# Default dataset subdirectory containing files with pin diode & laser data for each run
KVINDRAPulserDataTree.GenePinDir:   gene_pins

# Default headers for runlist columns
INDRADB.Runlist.Run:    Run
INDRADB.Runlist.Tape:    Tape
INDRADB.Runlist.Buffers:    Buffers (save)
INDRADB.Runlist.Events:    Events (save)
INDRADB.Runlist.Far1:    Faraday1
INDRADB.Runlist.Far2:    Faraday2
INDRADB.Runlist.Time:    Length (min)
INDRADB.Runlist.Size:    Size (MB)
INDRADB.Runlist.GDir:    Gene Direct
INDRADB.Runlist.GLas:    Gene Laser
INDRADB.Runlist.GElec:    Gene Elect
INDRADB.Runlist.GTest:    Gene Test
INDRADB.Runlist.GMarq:    Gene MRQ
INDRADB.Runlist.GTM:    Gene TM
INDRADB.Runlist.DEC:      DEC
INDRADB.Runlist.FC:      FC
INDRADB.Runlist.OK:      OK
INDRADB.Runlist.FT:      FT
INDRADB.Runlist.AVL:      AVL
INDRADB.Runlist.OCD:      OCD
INDRADB.Runlist.OA:      OA
INDRADB.Runlist.RAZ:      RAZ
INDRADB.Runlist.PlastAll:      Plastic (all)
INDRADB.Runlist.PlastG:      Plastic (G)
INDRADB.Runlist.PlastC:      Plastic (C)
INDRADB.Runlist.PlastD:      Plastic (D)
INDRADB.Runlist.TMpc:      Temps mort (%)
INDRADB.Runlist.Trigger:      Trigger
INDRADB.Runlist.Start:      Date (start)
INDRADB.Runlist.End:      Date (end)
INDRADB.Runlist.Comments:      Comments
INDRADB.Runlist.Log:      Cahier

# Plugins for different datasets
# Each dataset has an associated multidetector array describing the experimental setup.
# There must be an entry here for each dataset
# Syntax:
# Plugin.KVMultiDetArray:    name_of_dataset    name_of_class    name_of_plugin_library   constructor_to_call

# Plugins for reconstruction of particles from data/simulation
+Plugin.KVGroupReconstructor:   INDRA.forward KVINDRAForwardGroupReconstructor KVIndraexp_events "KVINDRAForwardGroupReconstructor()"
+Plugin.KVGroupReconstructor:   INDRA.backward KVINDRABackwardGroupReconstructor KVIndraexp_events "KVINDRABackwardGroupReconstructor()"
+Plugin.KVGroupReconstructor:   INDRA.etalon KVINDRAEtalonGroupReconstructor KVIndraexp_events "KVINDRAEtalonGroupReconstructor()"
+Plugin.KVGroupReconstructor:   INDRA.Filter KVINDRAFilterGroupReconstructor KVIndraexp_events "KVINDRAFilterGroupReconstructor()"

# Conditions for seeding reconstructed particles in event reconstruction
# Dataset-dependent values can be set with [Dataset].INDRA.ReconstructedNuclei.ParticleSeedCond
INDRA.ReconstructedNuclei.ParticleSeedCond: all

# The above variables control the way that particles are reconstructed from raw data
# The explanation follows, including 2 variables which are kept for backwards-compatibility
# (Reconstruction.DataAnalysisTask.ParticleSeedCond & INDRA_e475s.Reconstruction.DataAnalysisTask.ParticleSeedCond)
#
# In the detector in which the particle stops, we require KVDetector::Fired( "option" )
# with "option" = "all" or "any".
#
# In addition with these 2 options, it is possible that the test include the pedestal value
# using the "P" letter in front of "all" or "any"
# Exemple : the "Pall" option means that all of the associated acquisition parameters must be
# fired ABOVE the pedestal value.
#
# By default for INDRA data, "option" = "all", which means that all of the associated
# acquisition parameters must be fired in order for a particle to be reconstructed from the detector:
Reconstruction.DataAnalysisTask.ParticleSeedCond:     all
# To change this condition to the less strict "any" (meaning that KVDetector::Fired() returns
# kTRUE if the detector has at least one fired acquisition parameter, of any type), either
# change the previous value (this will affect ALL datasets), or, to change behaviour for a
# specific dataset, use a variable such as the following:
#INDRA_e475s.Reconstruction.DataAnalysisTask.ParticleSeedCond:     Pall
#
# You can "fine-tune" what is meant by "all" acquisition parameters using the following
# variables. For each detector type, give a comma-separated list of the acquisition
# parameter types to be taken into account in the KVDetector::Fired method.
# Only those parameters which appear in the list will be considered:
#  then "all" means => all parameters in the list
#  and  "any" means => any of the parameters in the list
# These lists are read during construction of multidetector arrays (KVMultiDetArray::Build),
# the method KVMultiDetArray::SetACQParams uses them to define a mask for each detector
# of the array.
KVINDRADetector.Fired.ACQParameterList.CI: PG,GG,T
KVINDRADetector.Fired.ACQParameterList.SI: PG,GG,T
KVINDRADetector.Fired.ACQParameterList.SILI: PG,GG,T
KVINDRADetector.Fired.ACQParameterList.SI75: PG,GG,T
KVINDRADetector.Fired.ACQParameterList.CSI: R,L,T

# Acceptable identification & energy codes for INDRA reconstructed particles
# Dataset-dependent values can be set with [Dataset].INDRA.ReconstructedNuclei.Accept[ID/E]Codes
INDRA.ReconstructedNuclei.AcceptIDCodes: 2-4,6
INDRA.ReconstructedNuclei.AcceptECodes: 1-3

# Plugins for different datasets
# Each dataset has an associated database of informations on runs, calibration parameters, etc.
# By default, this is assumed to be in file $KVROOT/db/name_of_dataset/[value of DataSet.DatabaseFile]
# If this file is not found, the database has to be rebuilt from the various parameter files in the
# directory, using the class indicated here.
# There must be an entry here for each dataset
# Syntax:
# Plugin.KVExpDB:    name_of_dataset    name_of_class    name_of_plugin_library   constructor_to_call

# file which gather all calibration files
INDRADB.CalibrationFiles:     INDRA.CalibrationFiles.dat

#================================ Plugins for different datasets
# Each multidetector array has an associated 'KVUpDater' object used to set run parameters.
# If there is no entry here for a dataset, an object of the default KVUpDater class will be used.
# Syntax:
# Plugin.KVUpDater:    name_of_dataset    name_of_class    name_of_plugin_library   constructor_to_call
+Plugin.KVUpDater:    INDRA_camp*    KVINDRAUpDater     KVIndradb    "KVINDRAUpDater()"

#============================== Plugins for identification telescopes
# The KVMultiDetArray::GetIDTelescopes(KVDetector*de, KVDetector*e) method uses these plugins to
# create KVIDTelescope instances adapted to the specific array geometry and detector types.
# For each pair of detectors we look for a plugin with one of the following names:
#	[name_of_dataset].INDRA.de_detector_type[de detector thickness]-e_detector_type[de detector thickness]
# Each characteristic in [] brackets may or may not be present in the name; first we test for names
# with these characteristics, then all combinations where one or other of the characteristics is not present.
# In addition, we first test all combinations which begin with [name_of_dataset].
# The first plugin found in this order will be used.
# In addition, if for one of the two detectors there is a plugin called
#	[name_of_dataset].INDRA.de_detector_type[de detector thickness]
#	[name_of_dataset].INDRA.e_detector_type[e detector thickness]
# then we add also an instance of this 1-detector identification telescope.

# DEFAULT IDTELESCOPE PLUGINS FOR INDRA
+Plugin.KVIDTelescope:    ^INDRA.PHOS$         KVIDPhoswich         KVIndraidentification         "KVIDPhoswich()"
+Plugin.KVIDTelescope:    ^INDRA.CSI$          KVIDINDRACsI         KVIndraidentification         "KVIDINDRACsI()"
+Plugin.KVIDTelescope:    ^INDRA.SI-CSI$       KVIDSiCsI            KVIndraidentification         "KVIDSiCsI()"
+Plugin.KVIDTelescope:    ^INDRA.SILI-CSI$     KVIDSiLiCsI          KVIndraidentification         "KVIDSiLiCsI()"
+Plugin.KVIDTelescope:    ^INDRA.SI75-SILI$    KVIDSi75SiLi         KVIndraidentification         "KVIDSi75SiLi()"
+Plugin.KVIDTelescope:    ^INDRA.CI-SI$        KVIDChIoSi           KVIndraidentification         "KVIDChIoSi()"
+Plugin.KVIDTelescope:    ^INDRA.CI-SI75$      KVIDChIoSi75         KVIndraidentification         "KVIDChIoSi75()"
+Plugin.KVIDTelescope:    ^INDRA.CI-CSI$       KVIDChIoCsI          KVIndraidentification         "KVIDChIoCsI()"

#======================= Identification parameter files for different datasets
# Format is
#
# [dataset name].IdentificationParameterFile.[identification telescope label]:      [filename]
#
# The identification telescope labels are those used in the KVIDTelescope plugin definitions above,
# e.g. 'PHOS', 'CSI', 'SI-CSI', etc. etc.
# If an absolute pathname is not given, the file must be in $KVROOT/KVFiles/[dataset name]
#

#====================== Active identifications for each dataset
# Only the identifications whose labels are given here will be initialised & capable of identifying particles
# (the labels/types are the same as in the definitions of the plugins above)
# Format:
#
# [dataset name].ActiveIdentifications:    [type1]  [type2] ...

#================================ Plugins for detectors
Plugin.KVDetector:     INDRA      KVINDRADetector      KVIndrageometry      "KVINDRADetector()"
+Plugin.KVDetector:      PHOS      KVPhoswich      KVIndrageometry      "KVPhoswich(Float_t)"
+Plugin.KVDetector:      ^SI$      KVSilicon      KVIndrageometry      "KVSilicon(Float_t)"
+Plugin.KVDetector:      ^SILI$      KVSiLi      KVIndrageometry      "KVSiLi(Float_t)"
+Plugin.KVDetector:      ^SI75$      KVSi75      KVIndrageometry      "KVSi75(Float_t)"
+Plugin.KVDetector:	CI             KVChIo      KVIndrageometry      "KVChIo(Float_t,Float_t)"
+Plugin.KVDetector: CSI             KVCsI       KVIndrageometry  "KVCsI(Float_t)"

# Environment variables for the Data Selectors. They define the filename and
# the directory of the file where the TEventList are stored. The default
# directory is the working directory and the default filename is
# "ListOfDataSelector.root".
#
#DataSelector.fileName: ListOfDataSelector.root
#DataSelector.directory: $(PWD)
#
#

# Mass Formula used in KVINDRAReconNuc to deduce A from Z nuclei
# if DataSet is specified like DataSet.KVINDRAReconNuc.MassFormula
# the chosen mass formula is only available for KVINDRAReconNuc for this dataset
KVINDRAReconNuc.MassFormula:        2

# Default identification grid classes for ID telescopes
# Used by KVIDGridManagerGUI when creating new grids
#
# The following are specific grids for specific telescopes
KVIDTelescope.DefaultGrid.CI-SI:        KVIDGChIoSi
KVIDTelescope.DefaultGrid.CI-SI75:      KVIDGChIoSi

# Default identification/cut classes for different ID graphs
# Used by KVIDGridManagerGUI when creating new grids
#
KVIDGChIoSi.CutClass:  KVIDCutLine
+KVIDGChIoSi.CutClass:  KVIDCutContour
KVIDGChIoSi.DefaultCutClass:  KVIDCutLine
KVIDGChIoSi.IDClass:  KVIDZALine

# Plugins for identification graphs/grids
# User can extend identification possibilities by adding plugins to list
+Plugin.KVIDGraph:   KVIDGChIoSi   KVIDGChIoSi   KVIndraidentification      "KVIDGChIoSi()"

# Mime-types for GUI
# These define the icons associated with different objects displayed in KVListView widgets.
+KaliVeda.GUI.MimeTypes:   KVIDGChIoSi
KaliVeda.GUI.MimeTypes.KVIDGChIoSi.Icon:   draw_t.xpm
+KaliVeda.GUI.MimeTypes:   KVINDRADBRun
KaliVeda.GUI.MimeTypes.KVINDRADBRun.Icon:   tree_t.xpm

# RUSTINES
# Plugin classes which implement patches to correct reconstructed/calibrated data
# written on disk with previous (bugged) versions. See KVDataPatch & KVDataPatchList.
Plugin.KVDataPatch:   INDRA_SanityChecks  KVDataPatch_INDRA_SanityChecks  KVIndraanalysis  "KVDataPatch_INDRA_SanityChecks()"
#+Plugin.KVDataPatch:   CorrectEtalonModuleIDCode  KVDataPatch_CorrectEtalonModuleIDCode  KVIndraanalysis  "KVDataPatch_CorrectEtalonModuleIDCode()"
+Plugin.KVDataPatch:   CorrectEtalonTrajectories  KVDataPatch_INDRA_CorrectEtalonTrajectories  KVIndraanalysis  "KVDataPatch_INDRA_CorrectEtalonTrajectories()"


# TRIGGER CONDITION PLUGINS
# used in analysis class KVEventSelector::SetTriggerConditionsForRun in order to exclude reconstructed data
# which is not consistent with the online DAQ trigger (multiplicity)
+Plugin.KVTriggerConditions: ^INDRA_$*  KVINDRATriggerConditions KVIndraanalysis "KVINDRATriggerConditions()"

+Plugin.KVCalibrator: ^LightEnergyCsITabacaruCamp21017$  KVLightEnergyCsI_Tabacaru_Camp2_10_17   KVIndracalibration "KVLightEnergyCsI_Tabacaru_Camp2_10_17()"

